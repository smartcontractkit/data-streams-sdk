use super::Report;

use snap::raw::Encoder;

#[derive(Debug)]
pub enum CompressionError {
    SerializationError(serde_json::Error),
    CompressionError(snap::Error),
}

impl From<snap::Error> for CompressionError {
    fn from(err: snap::Error) -> Self {
        CompressionError::CompressionError(err)
    }
}

/// Compresses a raw report payload using the [Snappy compression algorithm](https://google.github.io/snappy/).
///
/// # Arguments
///
/// * `payload` - The raw report payload to compress.
///
/// # Returns
///
/// A `Result` containing the compressed payload as a `Vec<u8>` if successful, or a `CompressionError` error if compression fails.
///
/// # Examples
/// ```rust
/// use data_streams_report::report::compress::{compress_report_raw, CompressionError};
///
/// fn main() -> Result<(), CompressionError> {
///    let raw_report = "7b22666565644944223a22307830303033366234616137653537636137623638616531626634353635336635366236353666643361613333356566376661653639366236363366316238343732222c2276616c696446726f6d54696d657374616d70223a313731383838353737322c226f62736572766174696f6e7354696d657374616d70223a313731383838353737322c2266756c6c5265706f7274223ad";
///    let report = hex::decode(raw_report).unwrap();
///
///    let compressed_report = compress_report_raw(&report).unwrap();
///
///     Ok(())
/// }
/// ```
pub fn compress_report_raw(payload: &[u8]) -> Result<Vec<u8>, CompressionError> {
    let mut encoder = Encoder::new();
    let compressed = encoder.compress_vec(payload)?;
    Ok(compressed)
}

/// Compresses a report using the [Snappy compression algorithm](https://google.github.io/snappy/).
///
/// # Arguments
///
/// * `report` - The report to compress.
///
/// # Returns
///
/// A `Result` containing the compressed payload as a `Vec<u8>` if successful, or a `CompressionError` error if serialization or compression fails.
///
/// # Examples
/// ```rust
/// use data_streams_report::report::{Report, compress::{compress_report, CompressionError}};
/// use data_streams_report::feed_id::ID;
///
/// fn main() -> Result<(), CompressionError> {
///    let feed_id = ID::from_hex_str("0x00036b4aa7e57ca7b68ae1bf45653f56b656fd3aa335ef7fae696b663f1b8472").unwrap();
///    let full_report = "0006bd87830d5f336e205cf5c63329a1dab8f5d56812eaeb7c69300e66ab8e22000000000000000000000000000000000000000000000000000000000cf7ed13000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000101000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000030ab7d02fbba9c6304f98824524407b1f494741174320cfd17a2c22eec1de0000000000000000000000000000000000000000000000000000000066a8f5c60000000000000000000000000000000000000000000000000000000066a8f5c6000000000000000000000000000000000000000000000000000057810653dd9000000000000000000000000000000000000000000000000000541315da76d6100000000000000000000000000000000000000000000000000000000066aa474600000000000000000000000000000000000000000000000009a697ee4230350400000000000000000000000000000000000000000000000009a6506d1426d00000000000000000000000000000000000000000000000000009a77d03ae355fe0000000000000000000000000000000000000000000000000000000000000000672bac991f5233df89f581dc02a89dd8d48419e3558b247d3e65f4069fa45c36658a5a4820dc94fc47a88a21d83474c29ee38382c46b6f9a575b9ce8be4e689c03c76fac19fbec4a29dba704c72cc003a6be1f96af115e322321f0688e24720a5d9bd7136a1d96842ec89133058b888b2e6572b5d4114de2426195e038f1c9a5ce50016b6f5a5de07e08529b845e1c622dcbefa0cfa2ffd128e9932ecee8efd869bc56d09a50ceb360a8d366cfa8eefe3f64279c88bdbc887560efa9944238eb000000000000000000000000000000000000000000000000000000000000000060e2a800f169f26164533c7faff6c9073cd6db240d89444d3487113232f9c31422a0993bb47d56807d0dc26728e4c8424bb9db77511001904353f1022168723010c46627c890be6e701e766679600696866c888ec80e7dbd428f5162a24f2d8262f846bdb06d9e46d295dd8e896fb232be80534b0041660fe4450a7ede9bc3b230722381773a4ae81241568867a759f53c2bdd05d32b209e78845fc58203949e50a608942b270c456001e578227ad00861cf5f47b27b09137a0c4b7f8b4746cef";
///
///    let report = Report {
///         feed_id,
///         valid_from_timestamp: 1718885772,
///         observations_timestamp: 1718885772,
///         full_report: full_report.to_string(),
///    };
///
///    let compressed_report = compress_report(report).unwrap();
///
///     Ok(())
/// }
/// ```
pub fn compress_report(report: Report) -> Result<Vec<u8>, CompressionError> {
    let payload = serde_json::to_vec(&report).map_err(CompressionError::SerializationError)?;

    compress_report_raw(&payload)
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::feed_id::ID;

    const COMPRESSED_MOCK_REPORT: &str = "e210f0817b22666565644944223a22307830303033366234616137653537636137623638616531626634353635336635366236353666643361613333356566376661653639366236363366316238343732222c2276616c696446726f6d54696d657374616d70223a313731383838353737322c226f62736572766174696f6e7354696d6573744223002466756c6c5265706f72740195f0403030366264383738333064356633333665323035636635633633333239613164616238663564353638313265616562376336393330306536366162386532323030da02001863663765643133da3e00fe01000d010065f64800eaff00050101fe1031303130300d06fe0100be01000431320172f03c333061623764303266626261396336333034663938383234353234343037623166343934373431313734333230636664313761326332326565633164650141ce01000c363661384166ce3c000101ee4000283537383130363533646439014bba01002c35343133313564613736643621bbd601001836366161343734c6000138396136393765653432333033353034c27e002c396136353036643134323664c23d003c30303039613737643033616533353566fa4003fd2ee0100fd";

    #[test]
    fn compress_report_raw_test() {
        let mock_report_raw = "7b22666565644944223a22307830303033366234616137653537636137623638616531626634353635336635366236353666643361613333356566376661653639366236363366316238343732222c2276616c696446726f6d54696d657374616d70223a313731383838353737322c226f62736572766174696f6e7354696d657374616d70223a313731383838353737322c2266756c6c5265706f7274223ad";
        let payload = hex::decode(mock_report_raw).unwrap();

        let got = compress_report_raw(&payload).unwrap();

        let want = COMPRESSED_MOCK_REPORT;

        assert_eq!(hex::encode(&got), want);
    }

    #[test]
    fn compress_report_test() {
        let mock_feed_id =
            ID::from_hex_str("0x00036b4aa7e57ca7b68ae1bf45653f56b656fd3aa335ef7fae696b663f1b8472")
                .unwrap();
        let mock_timestamp = 1718885772;
        let mock_report_data = "0006bd87830d5f336e205cf5c63329a1dab8f5d56812eaeb7c69300e66ab8e22000000000000000000000000000000000000000000000000000000000cf7ed13000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000101000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000030ab7d02fbba9c6304f98824524407b1f494741174320cfd17a2c22eec1de0000000000000000000000000000000000000000000000000000000066a8f5c60000000000000000000000000000000000000000000000000000000066a8f5c6000000000000000000000000000000000000000000000000000057810653dd9000000000000000000000000000000000000000000000000000541315da76d6100000000000000000000000000000000000000000000000000000000066aa474600000000000000000000000000000000000000000000000009a697ee4230350400000000000000000000000000000000000000000000000009a6506d1426d00000000000000000000000000000000000000000000000000009a77d03ae355fe0000000000000000000000000000000000000000000000000000000000000000672bac991f5233df89f581dc02a89dd8d48419e3558b247d3e65f4069fa45c36658a5a4820dc94fc47a88a21d83474c29ee38382c46b6f9a575b9ce8be4e689c03c76fac19fbec4a29dba704c72cc003a6be1f96af115e322321f0688e24720a5d9bd7136a1d96842ec89133058b888b2e6572b5d4114de2426195e038f1c9a5ce50016b6f5a5de07e08529b845e1c622dcbefa0cfa2ffd128e9932ecee8efd869bc56d09a50ceb360a8d366cfa8eefe3f64279c88bdbc887560efa9944238eb000000000000000000000000000000000000000000000000000000000000000060e2a800f169f26164533c7faff6c9073cd6db240d89444d3487113232f9c31422a0993bb47d56807d0dc26728e4c8424bb9db77511001904353f1022168723010c46627c890be6e701e766679600696866c888ec80e7dbd428f5162a24f2d8262f846bdb06d9e46d295dd8e896fb232be80534b0041660fe4450a7ede9bc3b230722381773a4ae81241568867a759f53c2bdd05d32b209e78845fc58203949e50a608942b270c456001e578227ad00861cf5f47b27b09137a0c4b7f8b4746cef";

        let mock_report = Report {
            feed_id: mock_feed_id,
            valid_from_timestamp: mock_timestamp,
            observations_timestamp: mock_timestamp,
            full_report: mock_report_data.to_string(),
        };

        let got = compress_report(mock_report).unwrap();

        let want = COMPRESSED_MOCK_REPORT;

        assert_eq!(hex::encode(&got), want);
    }
}
